version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: agent_db
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-agent_user} -d $${POSTGRES_DB:-agent_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: agent_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: agent_migrations
    depends_on:
      db:
        condition: service_healthy
    command: alembic upgrade head
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - .:/app
    restart: "no"

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: agent_api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "8000:8000"
    volumes:
      - .:/app

  worker:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: agent_worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: ["/bin/sh", "-c", "while true; do python -m orchestrator.mirror_worker; python -m orchestrator.knowledge_worker; sleep 60; done"]
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - .:/app

volumes:
  postgres_data:
